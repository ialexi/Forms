// ==========================================================================
// Project:   Forms.ModelFormView
// Copyright: Â©2009 Arthur Chafonov
// ==========================================================================

/*globals Forms */

/**@class
  @extends Forms.FormView
*/

Forms.ModelFormView = Forms.FormView.extend(
  /** @scope SC.ModelFormView.prototype */ {

  classNames: ['forms-model-view'],
  
  autoHide: NO,
  
  /*
    Basic property for binding form to record and generating form field
    with record attributes
  */
  autogenerateWith: null,
  
  autogenerated: YES,
  
  init: function() {
    this._rebuildFields();
    
    sc_super();
  },
  
  recordTypeDidChaged: function() {
    console.log('Changed. Rebuild...');
    this._rebuildFields();
  }.observes('autogenerateWith'),
  
  /*
    Building fields based on record prototype with attributeFields property
  */
  _rebuildFields: function() {
    console.log('Rebuilding');
    var fields = this.get('fields'),
        recordType = this.get('autogenerateWith'),
        attributeFields, primaryKey, object;
    
    if (SC.typeOf(recordType) === SC.T_STRING) {
      recordType = SC.objectForPropertyPath(recordType);
    }
    
    // we have no any record to create fields with
    if (!recordType) {
      console.error('No such record', recordType);
      return;
    }
    
    if (recordType && recordType.prototype) {
      attributeFields = recordType.prototype.attributeFields;
    }
    else {
      attributeFields = recordType.attributeFields;
    }
    console.log(attributeFields);
    for (var item in attributeFields) {
      var field;
      primaryKey = recordType.prototype ? recordType.prototype.primaryKey : recordType.primaryKey;
      if (item == primaryKey || item == 'contentValueKey') {
        continue;
      }
      field = this._mapField(attributeFields[item], item);
      // console.log(field);
      // Just for now make named property
      this[item] = field;
      
      fields.push(item);
      // fields.push(field);
    }
    this.set('fields', fields);
  },
  
  /**
    Maps record attribute to specific field type
    
    @param {SC.RecordAttribute} recordAttribute
    @param {String} key field name of the record attribute
    @return {Object} field mapped by recordAttribute type
  */
  _mapField: function(recordAttribute, key) {
    var recordType = this.get('autogenerateWith'),
        type = recordAttribute.get('type'),
        value, field;
    console.log(recordAttribute, key);
    // this.set('fieldKey', key);
    if (SC.instanceOf(recordAttribute, SC.RecordAttribute)) {
      if (recordType && SC.typeOf(recordType)===SC.T_OBJECT) {
        value = recordType.get(key);
        if (!value) {
          value = recordAttribute.get('defaultValue');
        }
      } else {
        value = recordAttribute.get('defaultValue');
      }
      console.log(value);
      // this.set('value', value);
      
      switch (type) {
        case 'Text':
          field = this.textField(key, value);
          break;
        case 'Boolean':
          field = this.booleanField(key, value);
          // hasLabel = NO;
          break;
        case 'File':
          field = this.fileField(key, value);
          break;
        default:
          field = this.defaultField(key, value);
      }
    }
    else if (SC.instanceOf(recordAttribute, SC.ManyAttribute)) {
      if (recordType && SC.typeOf(recordType)===SC.T_OBJECT) {
        value = recordType.get(key);
      }
      
      var m2mField = this.manyToManyField(key, value);
      console.log('M2M', m2mField, 'value:', value);
      field = m2mField;
    }
    
    return field;
  },
  
  defaultField: function(key, value) {
    var fieldData = {
      autoResize: NO,
      autoHide: NO,
      layout: { left: 0, right: 0, top: 0, bottom: 0, width: 200, height: 21 },
      value: value,
      fieldLabel: key.titleize()
    };
    return Forms.FormView.row(SC.TextFieldView, fieldData);
  },
  
  manyToManyField: function(key, value) {
    var fieldData = {
      content: value
    };
    
    console.log('M2M value:', value);
    var layoutData = {
      autoResize: NO,
      fieldKey: key,
      layout: {
        height: 100,
        width: 200,
        top: 0,
        left: 0
      }
    };
    var scrollViewContainer = SC.ScrollView.design({
      // layout: {
      //   height: 100,
      //   width: 200,
      //   top: 0,
      //   left: 140
      // },
      contentView: SC.ListView.design(fieldData)
    });
    
    return Forms.FormView.row(scrollViewContainer, layoutData);
    // return SC.ListView.design(fieldData).create({
    //   content: ['test', 'test','rest'],
    //   contentValueKey: 'contentValueKey'
    // });
  },
  
  booleanField: function(key, value) {
    var fieldData = {
      autoResize: NO,
      layout: { height: 21, left: 120, right: 20, centerY:0, width: 200 },
      fieldKey: key,
      fieldLabel: NO,
      value: value,
      displayTitle: key.titleize(),
      contentValueKey: NO,
      parentView: this
    };
    return Forms.FormView.row(SC.CheckboxView, fieldData);
  },
  
  textField: function(key, value) {
    var fieldData = {
      autoResize: NO,
      layout: { height: 100, left: 120, right: 20, centerY:0 },
      fieldKey: key,
      value: value,
      displayTitle: key.titleize(),
      isTextArea: YES,
      parentView: this
    };
    return Forms.FormView.row(SC.TextFieldView, fieldData);
    // return SC.TextFieldView.create(SC.Tokenable, fieldData);
  },
  
  fileField: function(key, value) {
    var fieldData = {
      autoResize: NO,
      layout: { height: 21, left: 120, right: 20, centerY:0 },
      fieldKey: key,
      value: value,
      parentView: this
    };
    return Forms.FormView.row(SC.FileFieldView, fieldData);
    // return SC.FileFieldView.create(fieldData);
  },
  
  /*=============================
    Validation stuff
  */
  isDirty: NO,
  
  errors: function() {
    
  },
  
  isValid: function() {
    return this.get('errors').length === 0;
  }.property('errors'),
  
  validate: function() {
    
  },
  
  /*==============================
    Commit stuff
  */
  
  commit: function() {
    
  },
  
  isCommitting: NO,
  
  canCommit: function() {
    return this.get('isValid') && this.get('isEnabled');
  }.property('isValid','isEnabled'),
  
  reset: function() {
    
  }
});

/** @private
  Hash of registered transforms by class guid. 
*/
Forms.FormView.transforms = {};

Forms.FormView.registerTransform = function(klass, transform) {
  Forms.FormView.transforms[SC.guidFor(klass)] = transform;
};

Forms.FormView.registerTransform(Boolean, {
  fieldData: {
    autoResize: NO,
    layout: { height: 21, left: 120, right: 20, centerY:0, width: 200 },
    // fieldKey: key,
    // fieldLabel: key.titleize(),
    // value: value,
    // displayTitle: key.titleize(),
    contentValueKey: NO,
    parentView: this
  }
}
);